/* tslint:disable */
/* eslint-disable */
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from "./common";
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "./base";

/**
 *
 * @export
 * @interface AddFileBinary
 */
export interface AddFileBinary {
	/**
	 *
	 * @type {string}
	 * @memberof AddFileBinary
	 */
	mime: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddFileBinary
	 */
	name: string;
	/**
	 *
	 * @type {Array<number>}
	 * @memberof AddFileBinary
	 */
	content: Array<number>;
}

/**
 *
 * @export
 * @interface BadRequest
 */
export interface BadRequest {
	/**
	 * The error name
	 * @type {string}
	 * @memberof BadRequest
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof BadRequest
	 */
	message: string;
	/**
	 * The status code of the exception
	 * @type {number}
	 * @memberof BadRequest
	 */
	status: number;
	/**
	 * A list of related errors
	 * @type {Array<GenericError>}
	 * @memberof BadRequest
	 */
	errors?: Array<GenericError>;
	/**
	 * The stack trace (only in development mode)
	 * @type {string}
	 * @memberof BadRequest
	 */
	stack?: string;
}

/**
 *
 * @export
 * @interface FileModel
 */
export interface FileModel {
	/**
	 *
	 * @type {string}
	 * @memberof FileModel
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof FileModel
	 */
	id: string;
	/**
	 *
	 * @type {string}
	 * @memberof FileModel
	 */
	mime: string;
}

/**
 *
 * @export
 * @interface FileModelWithContent
 */
export interface FileModelWithContent {
	/**
	 *
	 * @type {string}
	 * @memberof FileModelWithContent
	 */
	name: string;
	/**
	 *
	 * @type {string}
	 * @memberof FileModelWithContent
	 */
	id: string;
	/**
	 *
	 * @type {string}
	 * @memberof FileModelWithContent
	 */
	mime: string;
	/**
	 *
	 * @type {Array<number>}
	 * @memberof FileModelWithContent
	 */
	content: Array<number>;
}

/**
 *
 * @export
 * @interface Forbidden
 */
export interface Forbidden {
	/**
	 * The error name
	 * @type {string}
	 * @memberof Forbidden
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof Forbidden
	 */
	message: string;
	/**
	 * The status code of the exception
	 * @type {number}
	 * @memberof Forbidden
	 */
	status: number;
	/**
	 * A list of related errors
	 * @type {Array<GenericError>}
	 * @memberof Forbidden
	 */
	errors?: Array<GenericError>;
	/**
	 * The stack trace (only in development mode)
	 * @type {string}
	 * @memberof Forbidden
	 */
	stack?: string;
}

/**
 *
 * @export
 * @interface GenericError
 */
export interface GenericError {
	/**
	 * The error name
	 * @type {string}
	 * @memberof GenericError
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof GenericError
	 */
	message: string;

	[key: string]: object | any;
}

/**
 *
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
	/**
	 * The error name
	 * @type {string}
	 * @memberof InternalServerError
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof InternalServerError
	 */
	message: string;
	/**
	 * The status code of the exception
	 * @type {number}
	 * @memberof InternalServerError
	 */
	status: number;
	/**
	 * A list of related errors
	 * @type {Array<GenericError>}
	 * @memberof InternalServerError
	 */
	errors?: Array<GenericError>;
	/**
	 * The stack trace (only in development mode)
	 * @type {string}
	 * @memberof InternalServerError
	 */
	stack?: string;
}

/**
 *
 * @export
 * @interface NotFound
 */
export interface NotFound {
	/**
	 * The error name
	 * @type {string}
	 * @memberof NotFound
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof NotFound
	 */
	message: string;
	/**
	 * The status code of the exception
	 * @type {number}
	 * @memberof NotFound
	 */
	status: number;
	/**
	 * A list of related errors
	 * @type {Array<GenericError>}
	 * @memberof NotFound
	 */
	errors?: Array<GenericError>;
	/**
	 * The stack trace (only in development mode)
	 * @type {string}
	 * @memberof NotFound
	 */
	stack?: string;
}

/**
 *
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
	/**
	 * The error name
	 * @type {string}
	 * @memberof Unauthorized
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof Unauthorized
	 */
	message: string;
	/**
	 * The status code of the exception
	 * @type {number}
	 * @memberof Unauthorized
	 */
	status: number;
	/**
	 * A list of related errors
	 * @type {Array<GenericError>}
	 * @memberof Unauthorized
	 */
	errors?: Array<GenericError>;
	/**
	 * The stack trace (only in development mode)
	 * @type {string}
	 * @memberof Unauthorized
	 */
	stack?: string;
}

/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {any} file
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFile: async (file: any, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'file' is not null or undefined
			assertParamExists("addFile", "file", file);
			const localVarPath = `/api/files/public`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			if (file !== undefined) {
				localVarFormParams.append("file", file as any);
			}

			localVarHeaderParameter["Content-Type"] = "multipart/form-data";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {AddFileBinary} addFileBinary
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFileFromBytes: async (addFileBinary: AddFileBinary, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'addFileBinary' is not null or undefined
			assertParamExists("addFileFromBytes", "addFileBinary", addFileBinary);
			const localVarPath = `/api/files/public/bytes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(addFileBinary, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("deleteFile", "id", id);
			const localVarPath = `/api/files/public/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFile", "id", id);
			const localVarPath = `/api/files/public/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileContent", "id", id);
			const localVarPath = `/api/files/public/{id}/content`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileRaw: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileRaw", "id", id);
			const localVarPath = `/api/files/public/{id}/raw`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get all common files name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listFiles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/files/public`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {any} file
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addFile(
			file: any,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addFile(file, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {AddFileBinary} addFileBinary
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addFileFromBytes(
			addFileBinary: AddFileBinary,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addFileFromBytes(addFileBinary, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteFile(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileModelWithContent>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileContent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContent(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileRaw(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileRaw(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Get all common files name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async listFiles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileModel>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = PublicApiFp(configuration);
	return {
		/**
		 *
		 * @param {any} file
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFile(file: any, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<number> {
			return localVarFp.addFile(file, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {AddFileBinary} addFileBinary
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFileFromBytes(addFileBinary: AddFileBinary, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<number> {
			return localVarFp.addFileFromBytes(addFileBinary, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.deleteFile(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile(id: string, options?: any): AxiosPromise<FileModelWithContent> {
			return localVarFp.getFile(id, options).then((request) => request(axios, basePath));
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContent(id: string, options?: any): AxiosPromise<string> {
			return localVarFp.getFileContent(id, options).then((request) => request(axios, basePath));
		},
		/**
		 * Get the content of a file without authentication
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileRaw(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.getFileRaw(id, options).then((request) => request(axios, basePath));
		},
		/**
		 * Get all common files name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listFiles(options?: any): AxiosPromise<Array<FileModel>> {
			return localVarFp.listFiles(options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
	/**
	 *
	 * @param {any} file
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicApi
	 */
	public addFile(file: any, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return PublicApiFp(this.configuration)
			.addFile(file, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AddFileBinary} addFileBinary
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicApi
	 */
	public addFileFromBytes(addFileBinary: AddFileBinary, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return PublicApiFp(this.configuration)
			.addFileFromBytes(addFileBinary, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicApi
	 */
	public deleteFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return PublicApiFp(this.configuration)
			.deleteFile(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get the content of a file without authentication
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicApi
	 */
	public getFile(id: string, options?: AxiosRequestConfig) {
		return PublicApiFp(this.configuration)
			.getFile(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get the content of a file without authentication
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicApi
	 */
	public getFileContent(id: string, options?: AxiosRequestConfig) {
		return PublicApiFp(this.configuration)
			.getFileContent(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get the content of a file without authentication
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicApi
	 */
	public getFileRaw(id: string, options?: AxiosRequestConfig) {
		return PublicApiFp(this.configuration)
			.getFileRaw(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get all common files name
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicApi
	 */
	public listFiles(options?: AxiosRequestConfig) {
		return PublicApiFp(this.configuration)
			.listFiles(options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {any} file
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFile: async (file: any, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'file' is not null or undefined
			assertParamExists("addFile", "file", file);
			const localVarPath = `/api/files/user`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			if (file !== undefined) {
				localVarFormParams.append("file", file as any);
			}

			localVarHeaderParameter["Content-Type"] = "multipart/form-data";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {AddFileBinary} addFileBinary
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFileFromBytes: async (addFileBinary: AddFileBinary, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'addFileBinary' is not null or undefined
			assertParamExists("addFileFromBytes", "addFileBinary", addFileBinary);
			const localVarPath = `/api/files/user/bytes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(addFileBinary, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("deleteFile", "id", id);
			const localVarPath = `/api/files/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get the content of a file of the logged user
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFile", "id", id);
			const localVarPath = `/api/files/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get the content of a file of the logged user
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContent: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileContent", "id", id);
			const localVarPath = `/api/files/user/{id}/content`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get all files for the logged user
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listFiles: async (authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/files/user`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Get the content of a file of the logged user as a stream
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		streamFile: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("streamFile", "id", id);
			const localVarPath = `/api/files/user/{id}/content/stream`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {any} file
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addFile(
			file: any,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addFile(file, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {AddFileBinary} addFileBinary
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addFileFromBytes(
			addFileBinary: AddFileBinary,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addFileFromBytes(addFileBinary, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteFile(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Get the content of a file of the logged user
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFile(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileModelWithContent>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Get the content of a file of the logged user
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileContent(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContent(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Get all files for the logged user
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async listFiles(
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileModel>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Get the content of a file of the logged user as a stream
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async streamFile(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.streamFile(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UserApiFp(configuration);
	return {
		/**
		 *
		 * @param {any} file
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFile(file: any, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<number> {
			return localVarFp.addFile(file, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {AddFileBinary} addFileBinary
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFileFromBytes(addFileBinary: AddFileBinary, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<number> {
			return localVarFp.addFileFromBytes(addFileBinary, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.deleteFile(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 * Get the content of a file of the logged user
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<FileModelWithContent> {
			return localVarFp.getFile(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 * Get the content of a file of the logged user
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContent(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<string> {
			return localVarFp.getFileContent(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 * Get all files for the logged user
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		listFiles(authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<Array<FileModel>> {
			return localVarFp.listFiles(authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 * Get the content of a file of the logged user as a stream
		 * @param {string} id
		 * @param {string} [authenticationToken]
		 * @param {string} [authenticationToken2]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		streamFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<object> {
			return localVarFp.streamFile(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
	/**
	 *
	 * @param {any} file
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public addFile(file: any, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.addFile(file, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AddFileBinary} addFileBinary
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public addFileFromBytes(addFileBinary: AddFileBinary, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.addFileFromBytes(addFileBinary, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public deleteFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.deleteFile(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get the content of a file of the logged user
	 * @param {string} id
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public getFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.getFile(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get the content of a file of the logged user
	 * @param {string} id
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public getFileContent(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.getFileContent(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get all files for the logged user
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public listFiles(authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.listFiles(authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Get the content of a file of the logged user as a stream
	 * @param {string} id
	 * @param {string} [authenticationToken]
	 * @param {string} [authenticationToken2]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserApi
	 */
	public streamFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserApiFp(this.configuration)
			.streamFile(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
