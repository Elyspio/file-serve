/* tslint:disable */
/* eslint-disable */
/**
 * FileServe.Api.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from "./common";
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "./base";

/**
 *
 * @export
 * @interface FileData
 */
export interface FileData {
	/**
	 *
	 * @type {string}
	 * @memberof FileData
	 */
	id: string;
	/**
	 *
	 * @type {string}
	 * @memberof FileData
	 */
	username: string;
	/**
	 *
	 * @type {string}
	 * @memberof FileData
	 */
	filename: string;
	/**
	 *
	 * @type {string}
	 * @memberof FileData
	 */
	mime: string;
	/**
	 *
	 * @type {string}
	 * @memberof FileData
	 */
	location: string;
	/**
	 *
	 * @type {number}
	 * @memberof FileData
	 */
	size: number;
	/**
	 *
	 * @type {string}
	 * @memberof FileData
	 */
	idGridFs: string;
	/**
	 *
	 * @type {boolean}
	 * @memberof FileData
	 */
	hidden: boolean;
}

/**
 * PublicFilesApi - axios parameter creator
 * @export
 */
export const PublicFilesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} location
		 * @param {any} file
		 * @param {boolean} hidden
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFile: async (filename: string, location: string, file: any, hidden: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'filename' is not null or undefined
			assertParamExists("addFile", "filename", filename);
			// verify required parameter 'location' is not null or undefined
			assertParamExists("addFile", "location", location);
			// verify required parameter 'file' is not null or undefined
			assertParamExists("addFile", "file", file);
			// verify required parameter 'hidden' is not null or undefined
			assertParamExists("addFile", "hidden", hidden);
			const localVarPath = `/api/files/public`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

			if (filename !== undefined) {
				localVarFormParams.append("filename", filename as any);
			}

			if (location !== undefined) {
				localVarFormParams.append("location", location as any);
			}

			if (file !== undefined) {
				localVarFormParams.append("file", file as any);
			}

			if (hidden !== undefined) {
				localVarFormParams.append("hidden", hidden as any);
			}

			localVarHeaderParameter["Content-Type"] = "multipart/form-data";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("deleteFile", "id", id);
			const localVarPath = `/api/files/public/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFile", "id", id);
			const localVarPath = `/api/files/public/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileContent", "id", id);
			const localVarPath = `/api/files/public/{id}/binary`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContentAsStream: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileContentAsStream", "id", id);
			const localVarPath = `/api/files/public/{id}/stream`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContentAsString: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileContentAsString", "id", id);
			const localVarPath = `/api/files/public/{id}/string`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFiles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/files/public`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		toggleVisibility: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("toggleVisibility", "id", id);
			const localVarPath = `/api/files/public/{id}/visibility`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * PublicFilesApi - functional programming interface
 * @export
 */
export const PublicFilesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = PublicFilesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} location
		 * @param {any} file
		 * @param {boolean} hidden
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addFile(filename: string, location: string, file: any, hidden: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileData>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addFile(filename, location, file, hidden, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteFile(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileData>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileContent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContent(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileContentAsStream(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContentAsStream(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileContentAsString(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContentAsString(id, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFiles(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileData>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async toggleVisibility(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.toggleVisibility(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * PublicFilesApi - factory interface
 * @export
 */
export const PublicFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = PublicFilesApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} location
		 * @param {any} file
		 * @param {boolean} hidden
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFile(filename: string, location: string, file: any, hidden: boolean, options?: any): AxiosPromise<FileData> {
			return localVarFp.addFile(filename, location, file, hidden, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.deleteFile(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile(id: string, options?: any): AxiosPromise<FileData> {
			return localVarFp.getFile(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContent(id: string, options?: any): AxiosPromise<any> {
			return localVarFp.getFileContent(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContentAsStream(id: string, options?: any): AxiosPromise<void> {
			return localVarFp.getFileContentAsStream(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContentAsString(id: string, options?: any): AxiosPromise<string> {
			return localVarFp.getFileContentAsString(id, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFiles(options?: any): AxiosPromise<Array<FileData>> {
			return localVarFp.getFiles(options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		toggleVisibility(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.toggleVisibility(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * PublicFilesApi - object-oriented interface
 * @export
 * @class PublicFilesApi
 * @extends {BaseAPI}
 */
export class PublicFilesApi extends BaseAPI {
	/**
	 *
	 * @param {string} filename
	 * @param {string} location
	 * @param {any} file
	 * @param {boolean} hidden
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicFilesApi
	 */
	public addFile(filename: string, location: string, file: any, hidden: boolean, options?: AxiosRequestConfig) {
		return PublicFilesApiFp(this.configuration)
			.addFile(filename, location, file, hidden, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicFilesApi
	 */
	public deleteFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return PublicFilesApiFp(this.configuration)
			.deleteFile(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicFilesApi
	 */
	public getFile(id: string, options?: AxiosRequestConfig) {
		return PublicFilesApiFp(this.configuration)
			.getFile(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicFilesApi
	 */
	public getFileContent(id: string, options?: AxiosRequestConfig) {
		return PublicFilesApiFp(this.configuration)
			.getFileContent(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicFilesApi
	 */
	public getFileContentAsStream(id: string, options?: AxiosRequestConfig) {
		return PublicFilesApiFp(this.configuration)
			.getFileContentAsStream(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicFilesApi
	 */
	public getFileContentAsString(id: string, options?: AxiosRequestConfig) {
		return PublicFilesApiFp(this.configuration)
			.getFileContentAsString(id, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicFilesApi
	 */
	public getFiles(options?: AxiosRequestConfig) {
		return PublicFilesApiFp(this.configuration)
			.getFiles(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof PublicFilesApi
	 */
	public toggleVisibility(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return PublicFilesApiFp(this.configuration)
			.toggleVisibility(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * UserFilesApi - axios parameter creator
 * @export
 */
export const UserFilesApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} location
		 * @param {any} file
		 * @param {boolean} hidden
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFile: async (
			filename: string,
			location: string,
			file: any,
			hidden: boolean,
			authenticationToken?: string,
			authenticationToken2?: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'filename' is not null or undefined
			assertParamExists("addFile", "filename", filename);
			// verify required parameter 'location' is not null or undefined
			assertParamExists("addFile", "location", location);
			// verify required parameter 'file' is not null or undefined
			assertParamExists("addFile", "file", file);
			// verify required parameter 'hidden' is not null or undefined
			assertParamExists("addFile", "hidden", hidden);
			const localVarPath = `/api/files/user`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			if (filename !== undefined) {
				localVarFormParams.append("filename", filename as any);
			}

			if (location !== undefined) {
				localVarFormParams.append("location", location as any);
			}

			if (file !== undefined) {
				localVarFormParams.append("file", file as any);
			}

			if (hidden !== undefined) {
				localVarFormParams.append("hidden", hidden as any);
			}

			localVarHeaderParameter["Content-Type"] = "multipart/form-data";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("deleteFile", "id", id);
			const localVarPath = `/api/files/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFile", "id", id);
			const localVarPath = `/api/files/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContent: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileContent", "id", id);
			const localVarPath = `/api/files/user/{id}/binary`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContentAsStream: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileContentAsStream", "id", id);
			const localVarPath = `/api/files/user/{id}/stream`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContentAsString: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("getFileContentAsString", "id", id);
			const localVarPath = `/api/files/user/{id}/string`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFiles: async (authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/files/user`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		toggleVisibility: async (id: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists("toggleVisibility", "id", id);
			const localVarPath = `/api/files/user/{id}/visibility`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * UserFilesApi - functional programming interface
 * @export
 */
export const UserFilesApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = UserFilesApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} location
		 * @param {any} file
		 * @param {boolean} hidden
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addFile(
			filename: string,
			location: string,
			file: any,
			hidden: boolean,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileData>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addFile(filename, location, file, hidden, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteFile(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFile(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileData>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileContent(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContent(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileContentAsStream(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContentAsStream(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileContentAsString(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFileContentAsString(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFiles(
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileData>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async toggleVisibility(
			id: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.toggleVisibility(id, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UserFilesApi - factory interface
 * @export
 */
export const UserFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UserFilesApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} filename
		 * @param {string} location
		 * @param {any} file
		 * @param {boolean} hidden
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFile(filename: string, location: string, file: any, hidden: boolean, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<FileData> {
			return localVarFp.addFile(filename, location, file, hidden, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.deleteFile(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<FileData> {
			return localVarFp.getFile(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContent(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<any> {
			return localVarFp.getFileContent(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContentAsStream(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.getFileContentAsStream(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileContentAsString(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<string> {
			return localVarFp.getFileContentAsString(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFiles(authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<Array<FileData>> {
			return localVarFp.getFiles(authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} id
		 * @param {string} [authenticationToken] Authentication Token
		 * @param {string} [authenticationToken2] Authentication Token
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		toggleVisibility(id: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.toggleVisibility(id, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * UserFilesApi - object-oriented interface
 * @export
 * @class UserFilesApi
 * @extends {BaseAPI}
 */
export class UserFilesApi extends BaseAPI {
	/**
	 *
	 * @param {string} filename
	 * @param {string} location
	 * @param {any} file
	 * @param {boolean} hidden
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserFilesApi
	 */
	public addFile(filename: string, location: string, file: any, hidden: boolean, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserFilesApiFp(this.configuration)
			.addFile(filename, location, file, hidden, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserFilesApi
	 */
	public deleteFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserFilesApiFp(this.configuration)
			.deleteFile(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserFilesApi
	 */
	public getFile(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserFilesApiFp(this.configuration)
			.getFile(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserFilesApi
	 */
	public getFileContent(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserFilesApiFp(this.configuration)
			.getFileContent(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserFilesApi
	 */
	public getFileContentAsStream(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserFilesApiFp(this.configuration)
			.getFileContentAsStream(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserFilesApi
	 */
	public getFileContentAsString(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserFilesApiFp(this.configuration)
			.getFileContentAsString(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserFilesApi
	 */
	public getFiles(authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserFilesApiFp(this.configuration)
			.getFiles(authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} id
	 * @param {string} [authenticationToken] Authentication Token
	 * @param {string} [authenticationToken2] Authentication Token
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UserFilesApi
	 */
	public toggleVisibility(id: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UserFilesApiFp(this.configuration)
			.toggleVisibility(id, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
